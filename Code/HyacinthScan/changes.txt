line 439 - 461 - DBHandler
# =========================================== INDIVIDUAL STATS ===========================================

def getIndividualStats(conn, image_id):
    cur = conn.cursor()
    cur.execute(f'''
        SELECT lamina_area, lamina_length, lamina_width, scar_count, scar_area, damagepercentage
            FROM public.\"imagedata\"
                WHERE image_id = {image_id}
                ''')
    rows = cur.fetchall()
    cur.close()
    return rows[0] if rows else None

def getIndividualStatsCollection(image_id):
    conn = TestConnection()
    if conn == 'null':
        print('No Connection String')
        return None
    else:
        print('Connection String Found')
        tableData = getIndividualStats(conn, image_id)
        conn.close()
        return tableData



line 51 - output page (changed)
    self.image_preview_area.setSelectionMode(QListWidget.SingleSelection)

line 58 - output page (added)
    self.image_preview_area.itemClicked.connect(self.update_individual_stats)


Line 263 - 315 Output Page (chaged + added)
    def create_stats_grid_individual(self):
        grid_layout_average = QGridLayout()
        
        selected_items = self.image_preview_area.selectedItems()    #get current selected image, if any
        if selected_items:
            image_path = selected_items[0].text()
            path_id = DBObj.getPathID(image_path)
            
            if path_id:
                stats_data = DBObj.getIndividualStatsCollection(path_id[0][0])  #gets stats via dbhandler
                
                if stats_data:
                    stats = [
                        ("Leaf Area", 0, 0),
                        ("Scarred Area", 1, 0),
                        ("Percentage Damage", 2, 0),
                        ("Number of Scars", 3, 0),
                        ("Length of Leaf", 4, 0),
                        ("Width of Leaf", 5, 0),
                        (f"{round(stats_data[0], 4)} cm<sup>2</sup>", 0, 1),  # lamina_area
                        (f"{round(stats_data[4], 4)} cm<sup>2</sup>", 1, 1),  # scar_area
                        (f"{round(stats_data[5], 4)}", 2, 1),                 # damagepercentage
                        (f"{round(stats_data[3], 4)}", 3, 1),                 # scar_count
                        (f"{round(stats_data[1], 4)} cm", 4, 1),              # lamina_length
                        (f"{round(stats_data[2], 4)} cm", 5, 1)               # lamina_width
                    ]

                else:
                    stats = self.get_placeholder_stats()
            else:
                stats = self.get_placeholder_stats()
        else:
            stats = self.get_placeholder_stats()

        for text, row, col in stats:
            label = QLabel(text)
            
            # Apply different styles for the second column
            if col == 1:
                label.setAlignment(Qt.AlignRight)
                label.setStyleSheet("""
                    QLabel {
                        font-family: 'Inter';
                        font-weight: 400;
                        font-size: 18px;
                    }
                """)
            else:
                label.setAlignment(Qt.AlignLeft)
                label.setStyleSheet("""
                    QLabel {
                        font-family: 'Inter';
                        font-weight: 500;
                        font-size: 18px;
                    }
                """)        
            grid_layout_average.addWidget(label, row, col)

        return grid_layout_average
    
    def get_placeholder_stats(self):
        #Return placeholder stats when no image is selected or data is unavailable
        return [
            ("Leaf Area", 0, 0),
            ("Scarred Area", 1, 0),
            ("Percentage Damage", 2, 0),
            ("Number of Scars", 3, 0),
            ("Length of Leaf", 4, 0),
            ("Width of Leaf", 5, 0),
            ("- cm²", 0, 1),
            ("- cm²", 1, 1),
            ("-", 2, 1),
            ("-", 3, 1),
            ("- cm", 4, 1),
            ("- cm", 5, 1)
        ]
    
    #Updates individual stats grid when image is clicked
    def update_individual_stats(self, item):
        self.display_stats_individual(self.imageResults_area)