  font = cv2.FONT_HERSHEY_COMPLEX 
    img2 = cv2.imread('./images/results/edge.png', cv2.IMREAD_COLOR) 
    img = cv2.imread('./images/results/edge.png', cv2.IMREAD_GRAYSCALE) 
    l, w = img.shape[:2]
    _, threshold = cv2.threshold(img, 110, 255, cv2.THRESH_BINARY) 
    contours, _= cv2.findContours(threshold, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) 

    coordinateListY = []
    coordinateListX = []

    for cnt in contours : 
        approx = cv2.approxPolyDP(cnt, 0.009 * cv2.arcLength(cnt, True), True)  
        cv2.drawContours(img2, [approx], 0, (0, 0, 255), 5)  

        n = approx.ravel()  
        i = 0

        for j in n : 
            if(i % 2 == 0): 
                x = n[i] 
                y = n[i + 1] 

                string_Coordinates = str(x) + " " + str(y)
                print(str(x) + " " + str(y))
                coordinateListY.append(y) 
                coordinateListX.append(x)

                if(i == 0):  
                    cv2.putText(img2, "Arrow tip", (x, y), font, 0.5, (255, 0, 0))  
                else: 
                    cv2.putText(img2, string_Coordinates, (x, y), font, 0.5, (0, 255, 0))  
            i = i + 1

    cv2.imshow("Result",img2)

    coordinateListY.sort()
    coordinateListX.sort()

    top = coordinateListY[len(coordinateListY)-1]
    bottom = coordinateListY[0]
    left = coordinateListX[0]
    right = coordinateListX[len(coordinateListX)-1]



















    image = cv2.imread(path)
    mask = np.zeros(image.shape[:2], np.uint8)
    backgroundModel = np.zeros((1, 65), np.float64)
    foregroundModel = np.zeros((1, 65), np.float64)
    rectangle = (1, 1, int(w), int(h))
    cv2.grabCut(image, mask, rectangle, backgroundModel, foregroundModel, 3, cv2.GC_INIT_WITH_RECT)
    mask2 = np.where((mask == 2)|(mask == 0), 0, 1).astype('uint8')
    image_segmented = image * mask2[:, :, np.newaxis]
    cv2.imshow("Result", image_segmented)
    cv2.imwrite("./result.png", image_segmented)